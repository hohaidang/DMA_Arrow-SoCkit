// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.0 211

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire [11:0]  hps_0_h2f_axi_master_awid,                                        //                                       hps_0_h2f_axi_master.awid
		input  wire [29:0]  hps_0_h2f_axi_master_awaddr,                                      //                                                           .awaddr
		input  wire [3:0]   hps_0_h2f_axi_master_awlen,                                       //                                                           .awlen
		input  wire [2:0]   hps_0_h2f_axi_master_awsize,                                      //                                                           .awsize
		input  wire [1:0]   hps_0_h2f_axi_master_awburst,                                     //                                                           .awburst
		input  wire [1:0]   hps_0_h2f_axi_master_awlock,                                      //                                                           .awlock
		input  wire [3:0]   hps_0_h2f_axi_master_awcache,                                     //                                                           .awcache
		input  wire [2:0]   hps_0_h2f_axi_master_awprot,                                      //                                                           .awprot
		input  wire         hps_0_h2f_axi_master_awvalid,                                     //                                                           .awvalid
		output wire         hps_0_h2f_axi_master_awready,                                     //                                                           .awready
		input  wire [11:0]  hps_0_h2f_axi_master_wid,                                         //                                                           .wid
		input  wire [63:0]  hps_0_h2f_axi_master_wdata,                                       //                                                           .wdata
		input  wire [7:0]   hps_0_h2f_axi_master_wstrb,                                       //                                                           .wstrb
		input  wire         hps_0_h2f_axi_master_wlast,                                       //                                                           .wlast
		input  wire         hps_0_h2f_axi_master_wvalid,                                      //                                                           .wvalid
		output wire         hps_0_h2f_axi_master_wready,                                      //                                                           .wready
		output wire [11:0]  hps_0_h2f_axi_master_bid,                                         //                                                           .bid
		output wire [1:0]   hps_0_h2f_axi_master_bresp,                                       //                                                           .bresp
		output wire         hps_0_h2f_axi_master_bvalid,                                      //                                                           .bvalid
		input  wire         hps_0_h2f_axi_master_bready,                                      //                                                           .bready
		input  wire [11:0]  hps_0_h2f_axi_master_arid,                                        //                                                           .arid
		input  wire [29:0]  hps_0_h2f_axi_master_araddr,                                      //                                                           .araddr
		input  wire [3:0]   hps_0_h2f_axi_master_arlen,                                       //                                                           .arlen
		input  wire [2:0]   hps_0_h2f_axi_master_arsize,                                      //                                                           .arsize
		input  wire [1:0]   hps_0_h2f_axi_master_arburst,                                     //                                                           .arburst
		input  wire [1:0]   hps_0_h2f_axi_master_arlock,                                      //                                                           .arlock
		input  wire [3:0]   hps_0_h2f_axi_master_arcache,                                     //                                                           .arcache
		input  wire [2:0]   hps_0_h2f_axi_master_arprot,                                      //                                                           .arprot
		input  wire         hps_0_h2f_axi_master_arvalid,                                     //                                                           .arvalid
		output wire         hps_0_h2f_axi_master_arready,                                     //                                                           .arready
		output wire [11:0]  hps_0_h2f_axi_master_rid,                                         //                                                           .rid
		output wire [63:0]  hps_0_h2f_axi_master_rdata,                                       //                                                           .rdata
		output wire [1:0]   hps_0_h2f_axi_master_rresp,                                       //                                                           .rresp
		output wire         hps_0_h2f_axi_master_rlast,                                       //                                                           .rlast
		output wire         hps_0_h2f_axi_master_rvalid,                                      //                                                           .rvalid
		input  wire         hps_0_h2f_axi_master_rready,                                      //                                                           .rready
		input  wire         clk_0_clk_clk,                                                    //                                                  clk_0_clk.clk
		input  wire         DDR3_FPGA_afi_clk_clk,                                            //                                          DDR3_FPGA_afi_clk.clk
		input  wire         DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset,       //       DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset.reset
		input  wire         DDR3_FPGA_soft_reset_reset_bridge_in_reset_reset,                 //                 DDR3_FPGA_soft_reset_reset_bridge_in_reset.reset
		input  wire         dma_0_reset_reset_bridge_in_reset_reset,                          //                          dma_0_reset_reset_bridge_in_reset.reset
		input  wire         hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire [27:0]  dma_0_write_master_address,                                       //                                         dma_0_write_master.address
		output wire         dma_0_write_master_waitrequest,                                   //                                                           .waitrequest
		input  wire [15:0]  dma_0_write_master_byteenable,                                    //                                                           .byteenable
		input  wire         dma_0_write_master_chipselect,                                    //                                                           .chipselect
		input  wire         dma_0_write_master_write,                                         //                                                           .write
		input  wire [127:0] dma_0_write_master_writedata,                                     //                                                           .writedata
		output wire [23:0]  DDR3_FPGA_avl_address,                                            //                                              DDR3_FPGA_avl.address
		output wire         DDR3_FPGA_avl_write,                                              //                                                           .write
		output wire         DDR3_FPGA_avl_read,                                               //                                                           .read
		input  wire [127:0] DDR3_FPGA_avl_readdata,                                           //                                                           .readdata
		output wire [127:0] DDR3_FPGA_avl_writedata,                                          //                                                           .writedata
		output wire         DDR3_FPGA_avl_beginbursttransfer,                                 //                                                           .beginbursttransfer
		output wire [5:0]   DDR3_FPGA_avl_burstcount,                                         //                                                           .burstcount
		output wire [15:0]  DDR3_FPGA_avl_byteenable,                                         //                                                           .byteenable
		input  wire         DDR3_FPGA_avl_readdatavalid,                                      //                                                           .readdatavalid
		input  wire         DDR3_FPGA_avl_waitrequest                                         //                                                           .waitrequest
	);

	wire          dma_0_write_master_translator_avalon_universal_master_0_waitrequest;   // dma_0_write_master_agent:av_waitrequest -> dma_0_write_master_translator:uav_waitrequest
	wire  [127:0] dma_0_write_master_translator_avalon_universal_master_0_readdata;      // dma_0_write_master_agent:av_readdata -> dma_0_write_master_translator:uav_readdata
	wire          dma_0_write_master_translator_avalon_universal_master_0_debugaccess;   // dma_0_write_master_translator:uav_debugaccess -> dma_0_write_master_agent:av_debugaccess
	wire   [29:0] dma_0_write_master_translator_avalon_universal_master_0_address;       // dma_0_write_master_translator:uav_address -> dma_0_write_master_agent:av_address
	wire          dma_0_write_master_translator_avalon_universal_master_0_read;          // dma_0_write_master_translator:uav_read -> dma_0_write_master_agent:av_read
	wire   [15:0] dma_0_write_master_translator_avalon_universal_master_0_byteenable;    // dma_0_write_master_translator:uav_byteenable -> dma_0_write_master_agent:av_byteenable
	wire          dma_0_write_master_translator_avalon_universal_master_0_readdatavalid; // dma_0_write_master_agent:av_readdatavalid -> dma_0_write_master_translator:uav_readdatavalid
	wire          dma_0_write_master_translator_avalon_universal_master_0_lock;          // dma_0_write_master_translator:uav_lock -> dma_0_write_master_agent:av_lock
	wire          dma_0_write_master_translator_avalon_universal_master_0_write;         // dma_0_write_master_translator:uav_write -> dma_0_write_master_agent:av_write
	wire  [127:0] dma_0_write_master_translator_avalon_universal_master_0_writedata;     // dma_0_write_master_translator:uav_writedata -> dma_0_write_master_agent:av_writedata
	wire    [4:0] dma_0_write_master_translator_avalon_universal_master_0_burstcount;    // dma_0_write_master_translator:uav_burstcount -> dma_0_write_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                 // rsp_mux_002:src_valid -> dma_0_write_master_agent:rp_valid
	wire  [232:0] rsp_mux_002_src_data;                                                  // rsp_mux_002:src_data -> dma_0_write_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                 // dma_0_write_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [2:0] rsp_mux_002_src_channel;                                               // rsp_mux_002:src_channel -> dma_0_write_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                         // rsp_mux_002:src_startofpacket -> dma_0_write_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                           // rsp_mux_002:src_endofpacket -> dma_0_write_master_agent:rp_endofpacket
	wire  [127:0] ddr3_fpga_avl_agent_m0_readdata;                                       // DDR3_FPGA_avl_translator:uav_readdata -> DDR3_FPGA_avl_agent:m0_readdata
	wire          ddr3_fpga_avl_agent_m0_waitrequest;                                    // DDR3_FPGA_avl_translator:uav_waitrequest -> DDR3_FPGA_avl_agent:m0_waitrequest
	wire          ddr3_fpga_avl_agent_m0_debugaccess;                                    // DDR3_FPGA_avl_agent:m0_debugaccess -> DDR3_FPGA_avl_translator:uav_debugaccess
	wire   [29:0] ddr3_fpga_avl_agent_m0_address;                                        // DDR3_FPGA_avl_agent:m0_address -> DDR3_FPGA_avl_translator:uav_address
	wire   [15:0] ddr3_fpga_avl_agent_m0_byteenable;                                     // DDR3_FPGA_avl_agent:m0_byteenable -> DDR3_FPGA_avl_translator:uav_byteenable
	wire          ddr3_fpga_avl_agent_m0_read;                                           // DDR3_FPGA_avl_agent:m0_read -> DDR3_FPGA_avl_translator:uav_read
	wire          ddr3_fpga_avl_agent_m0_readdatavalid;                                  // DDR3_FPGA_avl_translator:uav_readdatavalid -> DDR3_FPGA_avl_agent:m0_readdatavalid
	wire          ddr3_fpga_avl_agent_m0_lock;                                           // DDR3_FPGA_avl_agent:m0_lock -> DDR3_FPGA_avl_translator:uav_lock
	wire  [127:0] ddr3_fpga_avl_agent_m0_writedata;                                      // DDR3_FPGA_avl_agent:m0_writedata -> DDR3_FPGA_avl_translator:uav_writedata
	wire          ddr3_fpga_avl_agent_m0_write;                                          // DDR3_FPGA_avl_agent:m0_write -> DDR3_FPGA_avl_translator:uav_write
	wire    [9:0] ddr3_fpga_avl_agent_m0_burstcount;                                     // DDR3_FPGA_avl_agent:m0_burstcount -> DDR3_FPGA_avl_translator:uav_burstcount
	wire          ddr3_fpga_avl_agent_rf_source_valid;                                   // DDR3_FPGA_avl_agent:rf_source_valid -> DDR3_FPGA_avl_agent_rsp_fifo:in_valid
	wire  [233:0] ddr3_fpga_avl_agent_rf_source_data;                                    // DDR3_FPGA_avl_agent:rf_source_data -> DDR3_FPGA_avl_agent_rsp_fifo:in_data
	wire          ddr3_fpga_avl_agent_rf_source_ready;                                   // DDR3_FPGA_avl_agent_rsp_fifo:in_ready -> DDR3_FPGA_avl_agent:rf_source_ready
	wire          ddr3_fpga_avl_agent_rf_source_startofpacket;                           // DDR3_FPGA_avl_agent:rf_source_startofpacket -> DDR3_FPGA_avl_agent_rsp_fifo:in_startofpacket
	wire          ddr3_fpga_avl_agent_rf_source_endofpacket;                             // DDR3_FPGA_avl_agent:rf_source_endofpacket -> DDR3_FPGA_avl_agent_rsp_fifo:in_endofpacket
	wire          ddr3_fpga_avl_agent_rsp_fifo_out_valid;                                // DDR3_FPGA_avl_agent_rsp_fifo:out_valid -> DDR3_FPGA_avl_agent:rf_sink_valid
	wire  [233:0] ddr3_fpga_avl_agent_rsp_fifo_out_data;                                 // DDR3_FPGA_avl_agent_rsp_fifo:out_data -> DDR3_FPGA_avl_agent:rf_sink_data
	wire          ddr3_fpga_avl_agent_rsp_fifo_out_ready;                                // DDR3_FPGA_avl_agent:rf_sink_ready -> DDR3_FPGA_avl_agent_rsp_fifo:out_ready
	wire          ddr3_fpga_avl_agent_rsp_fifo_out_startofpacket;                        // DDR3_FPGA_avl_agent_rsp_fifo:out_startofpacket -> DDR3_FPGA_avl_agent:rf_sink_startofpacket
	wire          ddr3_fpga_avl_agent_rsp_fifo_out_endofpacket;                          // DDR3_FPGA_avl_agent_rsp_fifo:out_endofpacket -> DDR3_FPGA_avl_agent:rf_sink_endofpacket
	wire          ddr3_fpga_avl_agent_rdata_fifo_src_valid;                              // DDR3_FPGA_avl_agent:rdata_fifo_src_valid -> DDR3_FPGA_avl_agent_rdata_fifo:in_valid
	wire  [129:0] ddr3_fpga_avl_agent_rdata_fifo_src_data;                               // DDR3_FPGA_avl_agent:rdata_fifo_src_data -> DDR3_FPGA_avl_agent_rdata_fifo:in_data
	wire          ddr3_fpga_avl_agent_rdata_fifo_src_ready;                              // DDR3_FPGA_avl_agent_rdata_fifo:in_ready -> DDR3_FPGA_avl_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_valid;                             // hps_0_h2f_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [160:0] hps_0_h2f_axi_master_agent_write_cp_data;                              // hps_0_h2f_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_axi_master_agent_write_cp_ready;                             // router:sink_ready -> hps_0_h2f_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_axi_master_agent_write_cp_startofpacket;                     // hps_0_h2f_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_write_cp_endofpacket;                       // hps_0_h2f_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_valid;                              // hps_0_h2f_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [160:0] hps_0_h2f_axi_master_agent_read_cp_data;                               // hps_0_h2f_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_axi_master_agent_read_cp_ready;                              // router_001:sink_ready -> hps_0_h2f_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_axi_master_agent_read_cp_startofpacket;                      // hps_0_h2f_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_agent_read_cp_endofpacket;                        // hps_0_h2f_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          dma_0_write_master_agent_cp_valid;                                     // dma_0_write_master_agent:cp_valid -> router_002:sink_valid
	wire  [232:0] dma_0_write_master_agent_cp_data;                                      // dma_0_write_master_agent:cp_data -> router_002:sink_data
	wire          dma_0_write_master_agent_cp_ready;                                     // router_002:sink_ready -> dma_0_write_master_agent:cp_ready
	wire          dma_0_write_master_agent_cp_startofpacket;                             // dma_0_write_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          dma_0_write_master_agent_cp_endofpacket;                               // dma_0_write_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                  // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [232:0] router_002_src_data;                                                   // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                  // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [2:0] router_002_src_channel;                                                // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                          // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                            // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          ddr3_fpga_avl_agent_rp_valid;                                          // DDR3_FPGA_avl_agent:rp_valid -> router_003:sink_valid
	wire  [232:0] ddr3_fpga_avl_agent_rp_data;                                           // DDR3_FPGA_avl_agent:rp_data -> router_003:sink_data
	wire          ddr3_fpga_avl_agent_rp_ready;                                          // router_003:sink_ready -> DDR3_FPGA_avl_agent:rp_ready
	wire          ddr3_fpga_avl_agent_rp_startofpacket;                                  // DDR3_FPGA_avl_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          ddr3_fpga_avl_agent_rp_endofpacket;                                    // DDR3_FPGA_avl_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                  // router_003:src_valid -> rsp_demux:sink_valid
	wire  [232:0] router_003_src_data;                                                   // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                  // rsp_demux:sink_ready -> router_003:src_ready
	wire    [2:0] router_003_src_channel;                                                // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                          // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                            // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> DDR3_FPGA_avl_burst_adapter:sink0_valid
	wire  [232:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> DDR3_FPGA_avl_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                     // DDR3_FPGA_avl_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [2:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> DDR3_FPGA_avl_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> DDR3_FPGA_avl_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> DDR3_FPGA_avl_burst_adapter:sink0_endofpacket
	wire          ddr3_fpga_avl_burst_adapter_source0_valid;                             // DDR3_FPGA_avl_burst_adapter:source0_valid -> DDR3_FPGA_avl_agent:cp_valid
	wire  [232:0] ddr3_fpga_avl_burst_adapter_source0_data;                              // DDR3_FPGA_avl_burst_adapter:source0_data -> DDR3_FPGA_avl_agent:cp_data
	wire          ddr3_fpga_avl_burst_adapter_source0_ready;                             // DDR3_FPGA_avl_agent:cp_ready -> DDR3_FPGA_avl_burst_adapter:source0_ready
	wire    [2:0] ddr3_fpga_avl_burst_adapter_source0_channel;                           // DDR3_FPGA_avl_burst_adapter:source0_channel -> DDR3_FPGA_avl_agent:cp_channel
	wire          ddr3_fpga_avl_burst_adapter_source0_startofpacket;                     // DDR3_FPGA_avl_burst_adapter:source0_startofpacket -> DDR3_FPGA_avl_agent:cp_startofpacket
	wire          ddr3_fpga_avl_burst_adapter_source0_endofpacket;                       // DDR3_FPGA_avl_burst_adapter:source0_endofpacket -> DDR3_FPGA_avl_agent:cp_endofpacket
	wire          rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> hps_0_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [232:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> hps_0_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_mux_src_ready;                                                     // hps_0_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_mux:src_ready
	wire    [2:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> hps_0_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> hps_0_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> hps_0_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid;                   // hps_0_h2f_axi_master_wr_rsp_width_adapter:out_valid -> hps_0_h2f_axi_master_agent:write_rp_valid
	wire  [160:0] hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data;                    // hps_0_h2f_axi_master_wr_rsp_width_adapter:out_data -> hps_0_h2f_axi_master_agent:write_rp_data
	wire          hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready;                   // hps_0_h2f_axi_master_agent:write_rp_ready -> hps_0_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire    [2:0] hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel;                 // hps_0_h2f_axi_master_wr_rsp_width_adapter:out_channel -> hps_0_h2f_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;           // hps_0_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> hps_0_h2f_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;             // hps_0_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> hps_0_h2f_axi_master_agent:write_rp_endofpacket
	wire          rsp_mux_001_src_valid;                                                 // rsp_mux_001:src_valid -> hps_0_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [232:0] rsp_mux_001_src_data;                                                  // rsp_mux_001:src_data -> hps_0_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_mux_001_src_ready;                                                 // hps_0_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_mux_001:src_ready
	wire    [2:0] rsp_mux_001_src_channel;                                               // rsp_mux_001:src_channel -> hps_0_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_mux_001_src_startofpacket;                                         // rsp_mux_001:src_startofpacket -> hps_0_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                           // rsp_mux_001:src_endofpacket -> hps_0_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid;                   // hps_0_h2f_axi_master_rd_rsp_width_adapter:out_valid -> hps_0_h2f_axi_master_agent:read_rp_valid
	wire  [160:0] hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data;                    // hps_0_h2f_axi_master_rd_rsp_width_adapter:out_data -> hps_0_h2f_axi_master_agent:read_rp_data
	wire          hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready;                   // hps_0_h2f_axi_master_agent:read_rp_ready -> hps_0_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire    [2:0] hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel;                 // hps_0_h2f_axi_master_rd_rsp_width_adapter:out_channel -> hps_0_h2f_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;           // hps_0_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> hps_0_h2f_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;             // hps_0_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> hps_0_h2f_axi_master_agent:read_rp_endofpacket
	wire          router_src_valid;                                                      // router:src_valid -> hps_0_h2f_axi_master_wr_cmd_width_adapter:in_valid
	wire  [160:0] router_src_data;                                                       // router:src_data -> hps_0_h2f_axi_master_wr_cmd_width_adapter:in_data
	wire          router_src_ready;                                                      // hps_0_h2f_axi_master_wr_cmd_width_adapter:in_ready -> router:src_ready
	wire    [2:0] router_src_channel;                                                    // router:src_channel -> hps_0_h2f_axi_master_wr_cmd_width_adapter:in_channel
	wire          router_src_startofpacket;                                              // router:src_startofpacket -> hps_0_h2f_axi_master_wr_cmd_width_adapter:in_startofpacket
	wire          router_src_endofpacket;                                                // router:src_endofpacket -> hps_0_h2f_axi_master_wr_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_wr_cmd_width_adapter_src_valid;                   // hps_0_h2f_axi_master_wr_cmd_width_adapter:out_valid -> cmd_demux:sink_valid
	wire  [232:0] hps_0_h2f_axi_master_wr_cmd_width_adapter_src_data;                    // hps_0_h2f_axi_master_wr_cmd_width_adapter:out_data -> cmd_demux:sink_data
	wire          hps_0_h2f_axi_master_wr_cmd_width_adapter_src_ready;                   // cmd_demux:sink_ready -> hps_0_h2f_axi_master_wr_cmd_width_adapter:out_ready
	wire    [2:0] hps_0_h2f_axi_master_wr_cmd_width_adapter_src_channel;                 // hps_0_h2f_axi_master_wr_cmd_width_adapter:out_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_axi_master_wr_cmd_width_adapter_src_startofpacket;           // hps_0_h2f_axi_master_wr_cmd_width_adapter:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_axi_master_wr_cmd_width_adapter_src_endofpacket;             // hps_0_h2f_axi_master_wr_cmd_width_adapter:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          router_001_src_valid;                                                  // router_001:src_valid -> hps_0_h2f_axi_master_rd_cmd_width_adapter:in_valid
	wire  [160:0] router_001_src_data;                                                   // router_001:src_data -> hps_0_h2f_axi_master_rd_cmd_width_adapter:in_data
	wire          router_001_src_ready;                                                  // hps_0_h2f_axi_master_rd_cmd_width_adapter:in_ready -> router_001:src_ready
	wire    [2:0] router_001_src_channel;                                                // router_001:src_channel -> hps_0_h2f_axi_master_rd_cmd_width_adapter:in_channel
	wire          router_001_src_startofpacket;                                          // router_001:src_startofpacket -> hps_0_h2f_axi_master_rd_cmd_width_adapter:in_startofpacket
	wire          router_001_src_endofpacket;                                            // router_001:src_endofpacket -> hps_0_h2f_axi_master_rd_cmd_width_adapter:in_endofpacket
	wire          hps_0_h2f_axi_master_rd_cmd_width_adapter_src_valid;                   // hps_0_h2f_axi_master_rd_cmd_width_adapter:out_valid -> cmd_demux_001:sink_valid
	wire  [232:0] hps_0_h2f_axi_master_rd_cmd_width_adapter_src_data;                    // hps_0_h2f_axi_master_rd_cmd_width_adapter:out_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_axi_master_rd_cmd_width_adapter_src_ready;                   // cmd_demux_001:sink_ready -> hps_0_h2f_axi_master_rd_cmd_width_adapter:out_ready
	wire    [2:0] hps_0_h2f_axi_master_rd_cmd_width_adapter_src_channel;                 // hps_0_h2f_axi_master_rd_cmd_width_adapter:out_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_axi_master_rd_cmd_width_adapter_src_startofpacket;           // hps_0_h2f_axi_master_rd_cmd_width_adapter:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_axi_master_rd_cmd_width_adapter_src_endofpacket;             // hps_0_h2f_axi_master_rd_cmd_width_adapter:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> crosser:in_valid
	wire  [232:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                  // crosser:in_ready -> cmd_demux:src0_ready
	wire    [2:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                     // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [232:0] crosser_out_data;                                                      // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                     // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [2:0] crosser_out_channel;                                                   // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                             // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                               // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                              // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire  [232:0] cmd_demux_001_src0_data;                                               // cmd_demux_001:src0_data -> crosser_001:in_data
	wire          cmd_demux_001_src0_ready;                                              // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire    [2:0] cmd_demux_001_src0_channel;                                            // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                      // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                        // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                 // crosser_001:out_valid -> cmd_mux:sink1_valid
	wire  [232:0] crosser_001_out_data;                                                  // crosser_001:out_data -> cmd_mux:sink1_data
	wire          crosser_001_out_ready;                                                 // cmd_mux:sink1_ready -> crosser_001:out_ready
	wire    [2:0] crosser_001_out_channel;                                               // crosser_001:out_channel -> cmd_mux:sink1_channel
	wire          crosser_001_out_startofpacket;                                         // crosser_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                           // crosser_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                              // cmd_demux_002:src0_valid -> crosser_002:in_valid
	wire  [232:0] cmd_demux_002_src0_data;                                               // cmd_demux_002:src0_data -> crosser_002:in_data
	wire          cmd_demux_002_src0_ready;                                              // crosser_002:in_ready -> cmd_demux_002:src0_ready
	wire    [2:0] cmd_demux_002_src0_channel;                                            // cmd_demux_002:src0_channel -> crosser_002:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                      // cmd_demux_002:src0_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                        // cmd_demux_002:src0_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                 // crosser_002:out_valid -> cmd_mux:sink2_valid
	wire  [232:0] crosser_002_out_data;                                                  // crosser_002:out_data -> cmd_mux:sink2_data
	wire          crosser_002_out_ready;                                                 // cmd_mux:sink2_ready -> crosser_002:out_ready
	wire    [2:0] crosser_002_out_channel;                                               // crosser_002:out_channel -> cmd_mux:sink2_channel
	wire          crosser_002_out_startofpacket;                                         // crosser_002:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_002_out_endofpacket;                                           // crosser_002:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> crosser_003:in_valid
	wire  [232:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> crosser_003:in_data
	wire          rsp_demux_src0_ready;                                                  // crosser_003:in_ready -> rsp_demux:src0_ready
	wire    [2:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> crosser_003:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                 // crosser_003:out_valid -> rsp_mux:sink0_valid
	wire  [232:0] crosser_003_out_data;                                                  // crosser_003:out_data -> rsp_mux:sink0_data
	wire          crosser_003_out_ready;                                                 // rsp_mux:sink0_ready -> crosser_003:out_ready
	wire    [2:0] crosser_003_out_channel;                                               // crosser_003:out_channel -> rsp_mux:sink0_channel
	wire          crosser_003_out_startofpacket;                                         // crosser_003:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                           // crosser_003:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                  // rsp_demux:src1_valid -> crosser_004:in_valid
	wire  [232:0] rsp_demux_src1_data;                                                   // rsp_demux:src1_data -> crosser_004:in_data
	wire          rsp_demux_src1_ready;                                                  // crosser_004:in_ready -> rsp_demux:src1_ready
	wire    [2:0] rsp_demux_src1_channel;                                                // rsp_demux:src1_channel -> crosser_004:in_channel
	wire          rsp_demux_src1_startofpacket;                                          // rsp_demux:src1_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                            // rsp_demux:src1_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                 // crosser_004:out_valid -> rsp_mux_001:sink0_valid
	wire  [232:0] crosser_004_out_data;                                                  // crosser_004:out_data -> rsp_mux_001:sink0_data
	wire          crosser_004_out_ready;                                                 // rsp_mux_001:sink0_ready -> crosser_004:out_ready
	wire    [2:0] crosser_004_out_channel;                                               // crosser_004:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_004_out_startofpacket;                                         // crosser_004:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                           // crosser_004:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                  // rsp_demux:src2_valid -> crosser_005:in_valid
	wire  [232:0] rsp_demux_src2_data;                                                   // rsp_demux:src2_data -> crosser_005:in_data
	wire          rsp_demux_src2_ready;                                                  // crosser_005:in_ready -> rsp_demux:src2_ready
	wire    [2:0] rsp_demux_src2_channel;                                                // rsp_demux:src2_channel -> crosser_005:in_channel
	wire          rsp_demux_src2_startofpacket;                                          // rsp_demux:src2_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                            // rsp_demux:src2_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                 // crosser_005:out_valid -> rsp_mux_002:sink0_valid
	wire  [232:0] crosser_005_out_data;                                                  // crosser_005:out_data -> rsp_mux_002:sink0_data
	wire          crosser_005_out_ready;                                                 // rsp_mux_002:sink0_ready -> crosser_005:out_ready
	wire    [2:0] crosser_005_out_channel;                                               // crosser_005:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_005_out_startofpacket;                                         // crosser_005:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                           // crosser_005:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          ddr3_fpga_avl_agent_rdata_fifo_out_valid;                              // DDR3_FPGA_avl_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [129:0] ddr3_fpga_avl_agent_rdata_fifo_out_data;                               // DDR3_FPGA_avl_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          ddr3_fpga_avl_agent_rdata_fifo_out_ready;                              // avalon_st_adapter:in_0_ready -> DDR3_FPGA_avl_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                         // avalon_st_adapter:out_0_valid -> DDR3_FPGA_avl_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_out_0_data;                                          // avalon_st_adapter:out_0_data -> DDR3_FPGA_avl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                         // DDR3_FPGA_avl_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                         // avalon_st_adapter:out_0_error -> DDR3_FPGA_avl_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (30),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (1),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) dma_0_write_master_translator (
		.clk                    (clk_0_clk_clk),                                                         //                       clk.clk
		.reset                  (dma_0_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (dma_0_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (dma_0_write_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (dma_0_write_master_byteenable),                                         //                          .byteenable
		.av_chipselect          (dma_0_write_master_chipselect),                                         //                          .chipselect
		.av_write               (dma_0_write_master_write),                                              //                          .write
		.av_writedata           (dma_0_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (6),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (30),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ddr3_fpga_avl_translator (
		.clk                    (DDR3_FPGA_afi_clk_clk),                                      //                      clk.clk
		.reset                  (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ddr3_fpga_avl_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (ddr3_fpga_avl_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (ddr3_fpga_avl_agent_m0_read),                                //                         .read
		.uav_write              (ddr3_fpga_avl_agent_m0_write),                               //                         .write
		.uav_waitrequest        (ddr3_fpga_avl_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (ddr3_fpga_avl_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (ddr3_fpga_avl_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (ddr3_fpga_avl_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (ddr3_fpga_avl_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (ddr3_fpga_avl_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (ddr3_fpga_avl_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (DDR3_FPGA_avl_address),                                      //      avalon_anti_slave_0.address
		.av_write               (DDR3_FPGA_avl_write),                                        //                         .write
		.av_read                (DDR3_FPGA_avl_read),                                         //                         .read
		.av_readdata            (DDR3_FPGA_avl_readdata),                                     //                         .readdata
		.av_writedata           (DDR3_FPGA_avl_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (DDR3_FPGA_avl_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (DDR3_FPGA_avl_burstcount),                                   //                         .burstcount
		.av_byteenable          (DDR3_FPGA_avl_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (DDR3_FPGA_avl_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (DDR3_FPGA_avl_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                           //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (64),
		.WDATA_WIDTH               (64),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (133),
		.PKT_CACHE_H               (155),
		.PKT_CACHE_L               (152),
		.PKT_ADDR_SIDEBAND_H       (131),
		.PKT_ADDR_SIDEBAND_L       (131),
		.PKT_PROTECTION_H          (151),
		.PKT_PROTECTION_L          (149),
		.PKT_BURST_SIZE_H          (128),
		.PKT_BURST_SIZE_L          (126),
		.PKT_BURST_TYPE_H          (130),
		.PKT_BURST_TYPE_L          (129),
		.PKT_RESPONSE_STATUS_L     (156),
		.PKT_RESPONSE_STATUS_H     (157),
		.PKT_BURSTWRAP_H           (125),
		.PKT_BURSTWRAP_L           (118),
		.PKT_BYTE_CNT_H            (117),
		.PKT_BYTE_CNT_L            (108),
		.PKT_ADDR_H                (101),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_EXCLUSIVE       (107),
		.PKT_TRANS_LOCK            (106),
		.PKT_TRANS_COMPRESSED_READ (102),
		.PKT_TRANS_POSTED          (103),
		.PKT_TRANS_WRITE           (104),
		.PKT_TRANS_READ            (105),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (135),
		.PKT_SRC_ID_L              (135),
		.PKT_DEST_ID_H             (136),
		.PKT_DEST_ID_L             (136),
		.PKT_THREAD_ID_H           (148),
		.PKT_THREAD_ID_L           (137),
		.PKT_QOS_L                 (134),
		.PKT_QOS_H                 (134),
		.PKT_ORI_BURST_SIZE_L      (158),
		.PKT_ORI_BURST_SIZE_H      (160),
		.PKT_DATA_SIDEBAND_H       (132),
		.PKT_DATA_SIDEBAND_L       (132),
		.ST_DATA_W                 (161),
		.ST_CHANNEL_W              (3),
		.ID                        (1)
	) hps_0_h2f_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                     //              clk.clk
		.aresetn                (~hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),               //         write_rp.valid
		.write_rp_data          (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),                //                 .data
		.write_rp_channel       (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),             //                 .channel
		.write_rp_startofpacket (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),       //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),         //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),               //                 .ready
		.read_cp_valid          (hps_0_h2f_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),               //          read_rp.valid
		.read_rp_data           (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),                //                 .data
		.read_rp_channel        (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),             //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),       //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),         //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),               //                 .ready
		.awid                   (hps_0_h2f_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                              //      (terminated)
		.aruser                 (1'b0),                                                              //      (terminated)
		.awqos                  (4'b0000),                                                           //      (terminated)
		.arqos                  (4'b0000),                                                           //      (terminated)
		.awregion               (4'b0000),                                                           //      (terminated)
		.arregion               (4'b0000),                                                           //      (terminated)
		.wuser                  (1'b0),                                                              //      (terminated)
		.ruser                  (),                                                                  //      (terminated)
		.buser                  ()                                                                   //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (232),
		.PKT_ORI_BURST_SIZE_L      (230),
		.PKT_RESPONSE_STATUS_H     (229),
		.PKT_RESPONSE_STATUS_L     (228),
		.PKT_QOS_H                 (206),
		.PKT_QOS_L                 (206),
		.PKT_DATA_SIDEBAND_H       (204),
		.PKT_DATA_SIDEBAND_L       (204),
		.PKT_ADDR_SIDEBAND_H       (203),
		.PKT_ADDR_SIDEBAND_L       (203),
		.PKT_BURST_TYPE_H          (202),
		.PKT_BURST_TYPE_L          (201),
		.PKT_CACHE_H               (227),
		.PKT_CACHE_L               (224),
		.PKT_THREAD_ID_H           (220),
		.PKT_THREAD_ID_L           (209),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_TRANS_EXCLUSIVE       (179),
		.PKT_TRANS_LOCK            (178),
		.PKT_BEGIN_BURST           (205),
		.PKT_PROTECTION_H          (223),
		.PKT_PROTECTION_L          (221),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (207),
		.PKT_SRC_ID_L              (207),
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (208),
		.ST_DATA_W                 (233),
		.ST_CHANNEL_W              (3),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (255),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) dma_0_write_master_agent (
		.clk                   (clk_0_clk_clk),                                                         //       clk.clk
		.reset                 (dma_0_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (dma_0_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (dma_0_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (dma_0_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (dma_0_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (dma_0_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (dma_0_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (dma_0_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (dma_0_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (dma_0_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (dma_0_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (dma_0_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (dma_0_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (dma_0_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (dma_0_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (dma_0_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (dma_0_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (232),
		.PKT_ORI_BURST_SIZE_L      (230),
		.PKT_RESPONSE_STATUS_H     (229),
		.PKT_RESPONSE_STATUS_L     (228),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_TRANS_LOCK            (178),
		.PKT_BEGIN_BURST           (205),
		.PKT_PROTECTION_H          (223),
		.PKT_PROTECTION_L          (221),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (190),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_POSTED          (175),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (207),
		.PKT_SRC_ID_L              (207),
		.PKT_DEST_ID_H             (208),
		.PKT_DEST_ID_L             (208),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (3),
		.ST_DATA_W                 (233),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ddr3_fpga_avl_agent (
		.clk                     (DDR3_FPGA_afi_clk_clk),                                      //             clk.clk
		.reset                   (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ddr3_fpga_avl_agent_m0_address),                             //              m0.address
		.m0_burstcount           (ddr3_fpga_avl_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (ddr3_fpga_avl_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (ddr3_fpga_avl_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (ddr3_fpga_avl_agent_m0_lock),                                //                .lock
		.m0_readdata             (ddr3_fpga_avl_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (ddr3_fpga_avl_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (ddr3_fpga_avl_agent_m0_read),                                //                .read
		.m0_waitrequest          (ddr3_fpga_avl_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (ddr3_fpga_avl_agent_m0_writedata),                           //                .writedata
		.m0_write                (ddr3_fpga_avl_agent_m0_write),                               //                .write
		.rp_endofpacket          (ddr3_fpga_avl_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (ddr3_fpga_avl_agent_rp_ready),                               //                .ready
		.rp_valid                (ddr3_fpga_avl_agent_rp_valid),                               //                .valid
		.rp_data                 (ddr3_fpga_avl_agent_rp_data),                                //                .data
		.rp_startofpacket        (ddr3_fpga_avl_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (ddr3_fpga_avl_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (ddr3_fpga_avl_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (ddr3_fpga_avl_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (ddr3_fpga_avl_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (ddr3_fpga_avl_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (ddr3_fpga_avl_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (ddr3_fpga_avl_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (ddr3_fpga_avl_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (ddr3_fpga_avl_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (ddr3_fpga_avl_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (ddr3_fpga_avl_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (ddr3_fpga_avl_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (ddr3_fpga_avl_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (ddr3_fpga_avl_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (ddr3_fpga_avl_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (ddr3_fpga_avl_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (ddr3_fpga_avl_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ddr3_fpga_avl_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (ddr3_fpga_avl_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (234),
		.FIFO_DEPTH          (33),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr3_fpga_avl_agent_rsp_fifo (
		.clk               (DDR3_FPGA_afi_clk_clk),                                      //       clk.clk
		.reset             (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr3_fpga_avl_agent_rf_source_data),                         //        in.data
		.in_valid          (ddr3_fpga_avl_agent_rf_source_valid),                        //          .valid
		.in_ready          (ddr3_fpga_avl_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (ddr3_fpga_avl_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (ddr3_fpga_avl_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (ddr3_fpga_avl_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (ddr3_fpga_avl_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (ddr3_fpga_avl_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (ddr3_fpga_avl_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (ddr3_fpga_avl_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ddr3_fpga_avl_agent_rdata_fifo (
		.clk               (DDR3_FPGA_afi_clk_clk),                                      //       clk.clk
		.reset             (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ddr3_fpga_avl_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (ddr3_fpga_avl_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (ddr3_fpga_avl_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (ddr3_fpga_avl_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (ddr3_fpga_avl_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (ddr3_fpga_avl_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                             //       src.ready
		.src_valid          (router_001_src_valid),                                             //          .valid
		.src_data           (router_001_src_data),                                              //          .data
		.src_channel        (router_001_src_channel),                                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (dma_0_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (dma_0_write_master_agent_cp_valid),         //          .valid
		.sink_data          (dma_0_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (dma_0_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dma_0_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                             //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_002_src_ready),                      //       src.ready
		.src_valid          (router_002_src_valid),                      //          .valid
		.src_data           (router_002_src_data),                       //          .data
		.src_channel        (router_002_src_channel),                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (ddr3_fpga_avl_agent_rp_ready),                               //      sink.ready
		.sink_valid         (ddr3_fpga_avl_agent_rp_valid),                               //          .valid
		.sink_data          (ddr3_fpga_avl_agent_rp_data),                                //          .data
		.sink_startofpacket (ddr3_fpga_avl_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (ddr3_fpga_avl_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (DDR3_FPGA_afi_clk_clk),                                      //       clk.clk
		.reset              (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                       //       src.ready
		.src_valid          (router_003_src_valid),                                       //          .valid
		.src_data           (router_003_src_data),                                        //          .data
		.src_channel        (router_003_src_channel),                                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (173),
		.PKT_ADDR_L                (144),
		.PKT_BEGIN_BURST           (205),
		.PKT_BYTE_CNT_H            (189),
		.PKT_BYTE_CNT_L            (180),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_BURST_SIZE_H          (200),
		.PKT_BURST_SIZE_L          (198),
		.PKT_BURST_TYPE_H          (202),
		.PKT_BURST_TYPE_L          (201),
		.PKT_BURSTWRAP_H           (197),
		.PKT_BURSTWRAP_L           (190),
		.PKT_TRANS_COMPRESSED_READ (174),
		.PKT_TRANS_WRITE           (176),
		.PKT_TRANS_READ            (177),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (233),
		.ST_CHANNEL_W              (3),
		.OUT_BYTE_CNT_H            (189),
		.OUT_BURSTWRAP_H           (197),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ddr3_fpga_avl_burst_adapter (
		.clk                   (DDR3_FPGA_afi_clk_clk),                                      //       cr0.clk
		.reset                 (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                          //          .ready
		.source0_valid         (ddr3_fpga_avl_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (ddr3_fpga_avl_burst_adapter_source0_data),                   //          .data
		.source0_channel       (ddr3_fpga_avl_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (ddr3_fpga_avl_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (ddr3_fpga_avl_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (ddr3_fpga_avl_burst_adapter_source0_ready)                   //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_ready),              //      sink.ready
		.sink_channel       (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_channel),            //          .channel
		.sink_data          (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_data),               //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_endofpacket),        //          .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_valid),              //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //          .valid
		.src0_data          (cmd_demux_src0_data),                                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                    //       clk.clk
		.reset              (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_ready),              //      sink.ready
		.sink_channel       (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_channel),            //          .channel
		.sink_data          (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_data),               //          .data
		.sink_startofpacket (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_endofpacket),        //          .endofpacket
		.sink_valid         (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_valid),              //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux_002 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                //          .valid
		.src0_data          (cmd_demux_002_src0_data),                 //          .data
		.src0_channel       (cmd_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)           //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (DDR3_FPGA_afi_clk_clk),                                      //       clk.clk
		.reset               (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                          //       src.ready
		.src_valid           (cmd_mux_src_valid),                                          //          .valid
		.src_data            (cmd_mux_src_data),                                           //          .data
		.src_channel         (cmd_mux_src_channel),                                        //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                          //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                          //          .valid
		.sink0_channel       (crosser_out_channel),                                        //          .channel
		.sink0_data          (crosser_out_data),                                           //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                    //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                      //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                      //          .valid
		.sink1_channel       (crosser_001_out_channel),                                    //          .channel
		.sink1_data          (crosser_001_out_data),                                       //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                              //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                                //          .endofpacket
		.sink2_ready         (crosser_002_out_ready),                                      //     sink2.ready
		.sink2_valid         (crosser_002_out_valid),                                      //          .valid
		.sink2_channel       (crosser_002_out_channel),                                    //          .channel
		.sink2_data          (crosser_002_out_data),                                       //          .data
		.sink2_startofpacket (crosser_002_out_startofpacket),                              //          .startofpacket
		.sink2_endofpacket   (crosser_002_out_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (DDR3_FPGA_afi_clk_clk),                                      //       clk.clk
		.reset              (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                       //      sink.ready
		.sink_channel       (router_003_src_channel),                                     //          .channel
		.sink_data          (router_003_src_data),                                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.src0_data          (rsp_demux_src0_data),                                        //          .data
		.src0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                 //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                       //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                       //          .valid
		.src1_data          (rsp_demux_src1_data),                                        //          .data
		.src1_channel       (rsp_demux_src1_channel),                                     //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                               //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                 //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                       //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                       //          .valid
		.src2_data          (rsp_demux_src2_data),                                        //          .data
		.src2_channel       (rsp_demux_src2_channel),                                     //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                               //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //          .valid
		.src_data            (rsp_mux_src_data),                                                 //          .data
		.src_channel         (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                            //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                            //          .valid
		.sink0_channel       (crosser_003_out_channel),                                          //          .channel
		.sink0_data          (crosser_003_out_data),                                             //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                    //       clk.clk
		.reset               (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                            //          .valid
		.src_data            (rsp_mux_001_src_data),                                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                            //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                            //          .valid
		.sink0_channel       (crosser_004_out_channel),                                          //          .channel
		.sink0_data          (crosser_004_out_data),                                             //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                   //          .valid
		.src_data            (rsp_mux_002_src_data),                    //          .data
		.src_channel         (rsp_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (crosser_005_out_ready),                   //     sink0.ready
		.sink0_valid         (crosser_005_out_valid),                   //          .valid
		.sink0_channel       (crosser_005_out_channel),                 //          .channel
		.sink0_data          (crosser_005_out_data),                    //          .data
		.sink0_startofpacket (crosser_005_out_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (crosser_005_out_endofpacket)              //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (189),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (190),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (157),
		.OUT_PKT_RESPONSE_STATUS_L     (156),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (158),
		.OUT_PKT_ORI_BURST_SIZE_H      (160),
		.OUT_ST_DATA_W                 (161),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_mux_src_valid),                                                //      sink.valid
		.in_channel           (rsp_mux_src_channel),                                              //          .channel
		.in_startofpacket     (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.in_ready             (rsp_mux_src_ready),                                                //          .ready
		.in_data              (rsp_mux_src_data),                                                 //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_data),               //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_channel),            //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_valid),              //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (173),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (189),
		.IN_PKT_BYTE_CNT_L             (180),
		.IN_PKT_TRANS_COMPRESSED_READ  (174),
		.IN_PKT_TRANS_WRITE            (176),
		.IN_PKT_BURSTWRAP_H            (197),
		.IN_PKT_BURSTWRAP_L            (190),
		.IN_PKT_BURST_SIZE_H           (200),
		.IN_PKT_BURST_SIZE_L           (198),
		.IN_PKT_RESPONSE_STATUS_H      (229),
		.IN_PKT_RESPONSE_STATUS_L      (228),
		.IN_PKT_TRANS_EXCLUSIVE        (179),
		.IN_PKT_BURST_TYPE_H           (202),
		.IN_PKT_BURST_TYPE_L           (201),
		.IN_PKT_ORI_BURST_SIZE_L       (230),
		.IN_PKT_ORI_BURST_SIZE_H       (232),
		.IN_ST_DATA_W                  (233),
		.OUT_PKT_ADDR_H                (101),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (117),
		.OUT_PKT_BYTE_CNT_L            (108),
		.OUT_PKT_TRANS_COMPRESSED_READ (102),
		.OUT_PKT_BURST_SIZE_H          (128),
		.OUT_PKT_BURST_SIZE_L          (126),
		.OUT_PKT_RESPONSE_STATUS_H     (157),
		.OUT_PKT_RESPONSE_STATUS_L     (156),
		.OUT_PKT_TRANS_EXCLUSIVE       (107),
		.OUT_PKT_BURST_TYPE_H          (130),
		.OUT_PKT_BURST_TYPE_L          (129),
		.OUT_PKT_ORI_BURST_SIZE_L      (158),
		.OUT_PKT_ORI_BURST_SIZE_H      (160),
		.OUT_ST_DATA_W                 (161),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (rsp_mux_001_src_valid),                                            //      sink.valid
		.in_channel           (rsp_mux_001_src_channel),                                          //          .channel
		.in_startofpacket     (rsp_mux_001_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (rsp_mux_001_src_endofpacket),                                      //          .endofpacket
		.in_ready             (rsp_mux_001_src_ready),                                            //          .ready
		.in_data              (rsp_mux_001_src_data),                                             //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_data),               //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_channel),            //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_valid),              //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (157),
		.IN_PKT_RESPONSE_STATUS_L      (156),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (158),
		.IN_PKT_ORI_BURST_SIZE_H       (160),
		.IN_ST_DATA_W                  (161),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (189),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_wr_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_src_valid),                                                 //      sink.valid
		.in_channel           (router_src_channel),                                               //          .channel
		.in_startofpacket     (router_src_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (router_src_endofpacket),                                           //          .endofpacket
		.in_ready             (router_src_ready),                                                 //          .ready
		.in_data              (router_src_data),                                                  //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_data),               //          .data
		.out_channel          (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_channel),            //          .channel
		.out_valid            (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_valid),              //          .valid
		.out_ready            (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_wr_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (101),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (117),
		.IN_PKT_BYTE_CNT_L             (108),
		.IN_PKT_TRANS_COMPRESSED_READ  (102),
		.IN_PKT_TRANS_WRITE            (104),
		.IN_PKT_BURSTWRAP_H            (125),
		.IN_PKT_BURSTWRAP_L            (118),
		.IN_PKT_BURST_SIZE_H           (128),
		.IN_PKT_BURST_SIZE_L           (126),
		.IN_PKT_RESPONSE_STATUS_H      (157),
		.IN_PKT_RESPONSE_STATUS_L      (156),
		.IN_PKT_TRANS_EXCLUSIVE        (107),
		.IN_PKT_BURST_TYPE_H           (130),
		.IN_PKT_BURST_TYPE_L           (129),
		.IN_PKT_ORI_BURST_SIZE_L       (158),
		.IN_PKT_ORI_BURST_SIZE_H       (160),
		.IN_ST_DATA_W                  (161),
		.OUT_PKT_ADDR_H                (173),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (189),
		.OUT_PKT_BYTE_CNT_L            (180),
		.OUT_PKT_TRANS_COMPRESSED_READ (174),
		.OUT_PKT_BURST_SIZE_H          (200),
		.OUT_PKT_BURST_SIZE_L          (198),
		.OUT_PKT_RESPONSE_STATUS_H     (229),
		.OUT_PKT_RESPONSE_STATUS_L     (228),
		.OUT_PKT_TRANS_EXCLUSIVE       (179),
		.OUT_PKT_BURST_TYPE_H          (202),
		.OUT_PKT_BURST_TYPE_L          (201),
		.OUT_PKT_ORI_BURST_SIZE_L      (230),
		.OUT_PKT_ORI_BURST_SIZE_H      (232),
		.OUT_ST_DATA_W                 (233),
		.ST_CHANNEL_W                  (3),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) hps_0_h2f_axi_master_rd_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                    //       clk.clk
		.reset                (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_001_src_valid),                                             //      sink.valid
		.in_channel           (router_001_src_channel),                                           //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_001_src_ready),                                             //          .ready
		.in_data              (router_001_src_data),                                              //          .data
		.out_endofpacket      (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_endofpacket),        //       src.endofpacket
		.out_data             (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_data),               //          .data
		.out_channel          (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_channel),            //          .channel
		.out_valid            (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_valid),              //          .valid
		.out_ready            (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_ready),              //          .ready
		.out_startofpacket    (hps_0_h2f_axi_master_rd_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (233),
		.BITS_PER_SYMBOL     (233),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (DDR3_FPGA_afi_clk_clk),                                            //       out_clk.clk
		.out_reset         (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                           //              .channel
		.in_data           (cmd_demux_src0_data),                                              //              .data
		.out_ready         (crosser_out_ready),                                                //           out.ready
		.out_valid         (crosser_out_valid),                                                //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                        //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                          //              .endofpacket
		.out_channel       (crosser_out_channel),                                              //              .channel
		.out_data          (crosser_out_data),                                                 //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (233),
		.BITS_PER_SYMBOL     (233),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                                    //        in_clk.clk
		.in_reset          (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (DDR3_FPGA_afi_clk_clk),                                            //       out_clk.clk
		.out_reset         (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                         //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                       //              .channel
		.in_data           (cmd_demux_001_src0_data),                                          //              .data
		.out_ready         (crosser_001_out_ready),                                            //           out.ready
		.out_valid         (crosser_001_out_valid),                                            //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                          //              .channel
		.out_data          (crosser_001_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (233),
		.BITS_PER_SYMBOL     (233),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_0_clk_clk),                                              //        in_clk.clk
		.in_reset          (dma_0_reset_reset_bridge_in_reset_reset),                    //  in_clk_reset.reset
		.out_clk           (DDR3_FPGA_afi_clk_clk),                                      //       out_clk.clk
		.out_reset         (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                   //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                   //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                           //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                             //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                                 //              .channel
		.in_data           (cmd_demux_002_src0_data),                                    //              .data
		.out_ready         (crosser_002_out_ready),                                      //           out.ready
		.out_valid         (crosser_002_out_valid),                                      //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                    //              .channel
		.out_data          (crosser_002_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (233),
		.BITS_PER_SYMBOL     (233),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (DDR3_FPGA_afi_clk_clk),                                            //        in_clk.clk
		.in_reset          (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                             //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                             //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                       //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                           //              .channel
		.in_data           (rsp_demux_src0_data),                                              //              .data
		.out_ready         (crosser_003_out_ready),                                            //           out.ready
		.out_valid         (crosser_003_out_valid),                                            //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                          //              .channel
		.out_data          (crosser_003_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (233),
		.BITS_PER_SYMBOL     (233),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (DDR3_FPGA_afi_clk_clk),                                            //        in_clk.clk
		.in_reset          (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                    //       out_clk.clk
		.out_reset         (hps_0_h2f_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                             //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                             //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                       //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                           //              .channel
		.in_data           (rsp_demux_src1_data),                                              //              .data
		.out_ready         (crosser_004_out_ready),                                            //           out.ready
		.out_valid         (crosser_004_out_valid),                                            //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                          //              .channel
		.out_data          (crosser_004_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (233),
		.BITS_PER_SYMBOL     (233),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (3),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (DDR3_FPGA_afi_clk_clk),                                      //        in_clk.clk
		.in_reset          (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                              //       out_clk.clk
		.out_reset         (dma_0_reset_reset_bridge_in_reset_reset),                    // out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                       //            in.ready
		.in_valid          (rsp_demux_src2_valid),                                       //              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                               //              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                                 //              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                     //              .channel
		.in_data           (rsp_demux_src2_data),                                        //              .data
		.out_ready         (crosser_005_out_ready),                                      //           out.ready
		.out_valid         (crosser_005_out_valid),                                      //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                              //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                    //              .channel
		.out_data          (crosser_005_out_data),                                       //              .data
		.in_empty          (1'b0),                                                       //   (terminated)
		.in_error          (1'b0),                                                       //   (terminated)
		.out_empty         (),                                                           //   (terminated)
		.out_error         ()                                                            //   (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (DDR3_FPGA_afi_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (DDR3_FPGA_avl_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ddr3_fpga_avl_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (ddr3_fpga_avl_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (ddr3_fpga_avl_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                               //         .error
	);

endmodule
